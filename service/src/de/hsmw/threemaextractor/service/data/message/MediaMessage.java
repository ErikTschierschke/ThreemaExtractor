package de.hsmw.threemaextractor.service.data.message;

import de.hsmw.threemaextractor.service.file.MasterKey;
import de.hsmw.threemaextractor.service.main.CryptUtils;
import de.hsmw.threemaextractor.service.main.FileStore;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

/**
 * media message data record<p>
 * <p>
 * for generic attributes see {@link IMessage}
 *
 * @param plainFileName the original media file name
 * @param mimeType      the mime-type of the media
 * @param caption       the description of the media in chat
 */
public record MediaMessage(String uid, String identity, boolean isOutgoing,
                           State state, Date utcSent, Date utcReceived, Date utcRead,
                           String plainFileName, String mimeType,
                           String caption) implements IMessage {

    /**
     * gets the name of the associated encrypted file in the media dir
     * format: {@code "." + [uid without "-"]}
     *
     * @return the name of the associated encrypted file
     */
    public String getEncryptedFileName() {
        return "." + uid.replaceAll("-", "");
    }


    /**
     * multiple files may have the same {@code plainFileName} (e.g. voice messages on from the iOS app always have the name
     * "{@code recordAudio.m4a}")<p>
     * thus a unique plain name is generated by prepending 4 digits of the uid
     *
     * @return the unique plain file name<p>
     * format: {@code [first 4 digits of UID] + "-" + plainFileName}
     */
    public String getUniquePlainName() {
        return uid.substring(0, 4) + "-" + plainFileName;
    }

    /**
     * decrypts and saves the media file
     *
     * @param masterKey the master key
     * @param mediaDir  the media dir (see {@link FileStore#getMediaDir()})
     * @param outDir    the output dir (see {@link FileStore#getOutputDir()})
     * @throws IOException if the associated encrypted file couldn't be found or creating the plain file failed
     */
    public void saveFile(MasterKey masterKey, File mediaDir, File outDir) throws IOException {

        FileInputStream fis = new FileInputStream(new File(mediaDir, getEncryptedFileName()));
        byte[] data = CryptUtils.getCipherInputStream(fis, masterKey).readAllBytes();
        fis.close();

        File outFile = new File(outDir, getUniquePlainName());
        outFile.getParentFile().mkdirs();
        FileOutputStream fos = new FileOutputStream(outFile);
        fos.write(data);
        fos.close();
    }

    /**
     * @hidden
     */
    @Override
    public int compareTo(IMessage message) {
        return utcSent.compareTo(message.utcSent());
    }
}
