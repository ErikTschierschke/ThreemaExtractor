package de.hsmw.threemaextractor.service.main;

import com.lambdaworks.crypto.SCrypt;
import de.hsmw.threemaextractor.service.file.MasterKey;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

public class CryptUtils {


    /**
     * calculates the decryption key from the passphrase based on the used algorithm
     * (see https://github.com/threema-ch/threema-android/blob/557b69f33dd1db96f58e41f6602e32522470f53e/app/src/main/java/ch/threema/localcrypto/MasterKey.java#L520)
     *
     * @param protectedFlag first byte of key.dat (0x02 -> Scrypt is used, 0x01 -> PBKDF2 is used)
     * @param salt          bytes 0x21-0x2C of key.dat (random salt generated by Threema)
     * @param passphrase    passphrase that protects the master key
     * @return 32 byte key that can be XORed with the deobfuscated key to decrypt it
     */
    public static byte[] getPassphraseDecryptionKey(byte protectedFlag, byte[] salt, String passphrase) throws GeneralSecurityException {
        byte[] decryptionKey = new byte[32];

        switch (protectedFlag) {
            case 1: {
                //calculate key with PBKDF2
                KeySpec keySpec = new PBEKeySpec(passphrase.toCharArray(), salt, 10000, 256);
                SecretKeyFactory factory = null;

                try {
                    factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
                    decryptionKey = factory.generateSecret(keySpec).getEncoded();

                } catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
                    //won't happen
                    e.printStackTrace();
                }
                break;
            }
            case 2: {
                //calculate key with Scrypt
                decryptionKey = SCrypt.scrypt(passphrase.getBytes(StandardCharsets.UTF_8), salt, 65536, 8, 1, 32);
                break;
            }
            default: {
                throw new IllegalArgumentException("ERROR DECRYPTING MASTER KEY: Unknown protection flag " + protectedFlag);
            }
        }

        return decryptionKey;

    }

    /**
     * get cipher input stream capable of reading encrypted threema media files
     * see https://github.com/threema-ch/threema-android/blob/0b6543eafe325c37d25ae06e87802c5479bee099/app/src/main/java/ch/threema/localcrypto/MasterKey.java#L348
     *
     * @param fileInputStream FileInputStream of a media file encrypted by Threema
     * @param masterKey       the used Master Key
     * @return a CipherInputStream able to read the decrypted file content
     */
    public static CipherInputStream getCipherInputStream(FileInputStream fileInputStream, MasterKey masterKey) throws IOException {

        //first 16 bytes are used as init vector
        byte[] initVector = new byte[16];
        fileInputStream.read(initVector);

        return new CipherInputStream(fileInputStream,
                getDecryptCipher(masterKey, initVector));

    }

    /**
     * get the decryption Cipher for a media file based on the master key and the initVector (first 16 byte of encrypted file)
     * see https://github.com/threema-ch/threema-android/blob/0b6543eafe325c37d25ae06e87802c5479bee099/app/src/main/java/ch/threema/localcrypto/MasterKey.java#L411
     *
     * @param masterKey  the used Master Key
     * @param initVector first 16 byte of encrypted file (random bytes)
     * @return the Cipher to decrypt the file
     */
    private static Cipher getDecryptCipher(MasterKey masterKey, byte[] initVector) {
        try {
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE,
                    new SecretKeySpec(masterKey.getKey(), "AES"),
                    new IvParameterSpec(initVector));

            return cipher;

        } catch (InvalidAlgorithmParameterException | NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * calculates the checksum for a decrypted master key
     *
     * @param key decrypted master key bytes
     * @return first 4 bytes of SHA1 hash (can be compared to last 4 bytes of key.dat, see {@link MasterKey})
     */
    public static String calcPassphraseChecksum(byte[] key) {

        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException e) {
            // won't happen
            e.printStackTrace();
        }
        sha1.update(key);

        return new String(sha1.digest(), 0, 4);

    }

    /**
     * get the SHA256-hash for a string
     */
    public static byte[] sha256(String input) {
        MessageDigest sha256 = null;
        try {
            sha256 = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            //won't happen
            e.printStackTrace();
        }
        sha256.update(input.getBytes());
        return sha256.digest();
    }
}
